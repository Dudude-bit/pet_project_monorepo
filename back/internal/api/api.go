// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"

	"github.com/gofiber/fiber/v2"
)

const (
	JWTAuthScopes = "JWTAuth.Scopes"
)

// AccessToken Access token
type AccessToken = string

// Authorization Authorization info
type Authorization struct {
	// AccessToken Access token
	AccessToken AccessToken `json:"access_token"`
}

// Email Email of user
type Email = string

// Error Error that appeared while processing request
type Error = string

// Password Password of user
type Password = string

// User User schema
type User struct {
	// Email Email of user
	Email Email `json:"email" validate:"required,email"`

	// Username Username of user
	Username Username `json:"username" validate:"required"`
}

// Username Username of user
type Username = string

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password Password of user
	Password Password `json:"password" validate:"required"`

	// Username Username of user
	Username Username `json:"username" validate:"required"`
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email Email of user
	Email Email `json:"email" validate:"required,email"`

	// Password Password of user
	Password Password `json:"password" validate:"required"`

	// RepeatPassword Repeat password
	RepeatPassword string `json:"repeat_password" validate:"required,eqfield=Password"`

	// Username Username of user
	Username Username `json:"username" validate:"required"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	// Password Password of user
	Password Password `json:"password" validate:"required"`

	// Username Username of user
	Username Username `json:"username" validate:"required"`
}

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody struct {
	// Email Email of user
	Email Email `json:"email" validate:"required,email"`

	// Password Password of user
	Password Password `json:"password" validate:"required"`

	// RepeatPassword Repeat password
	RepeatPassword string `json:"repeat_password" validate:"required,eqfield=Password"`

	// Username Username of user
	Username Username `json:"username" validate:"required"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /users/login)
	LoginUser(c *fiber.Ctx) error
	// Information about current user
	// (GET /users/me)
	UserMe(c *fiber.Ctx) error
	// Register user
	// (POST /users/register)
	RegisterUser(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *fiber.Ctx) error {

	return siw.Handler.LoginUser(c)
}

// UserMe operation middleware
func (siw *ServerInterfaceWrapper) UserMe(c *fiber.Ctx) error {

	c.Context().SetUserValue(JWTAuthScopes, []string{})

	return siw.Handler.UserMe(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *fiber.Ctx) error {

	return siw.Handler.RegisterUser(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/users/login", wrapper.LoginUser)

	router.Get(options.BaseURL+"/users/me", wrapper.UserMe)

	router.Post(options.BaseURL+"/users/register", wrapper.RegisterUser)

}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(ctx *fiber.Ctx) error
}

type LoginUser200JSONResponse struct {
	// Data Authorization info
	Data *Authorization `json:"data,omitempty"`

	// Error Error that appeared while processing request
	Error *Error `json:"error,omitempty"`
}

func (response LoginUser200JSONResponse) VisitLoginUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UserMeRequestObject struct {
}

type UserMeResponseObject interface {
	VisitUserMeResponse(ctx *fiber.Ctx) error
}

type UserMe200JSONResponse struct {
	// Data User schema
	Data *User `json:"data,omitempty"`

	// Error Error that appeared while processing request
	Error *Error `json:"error,omitempty"`
}

func (response UserMe200JSONResponse) VisitUserMeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(ctx *fiber.Ctx) error
}

type RegisterUser200JSONResponse struct {
	// Data User schema
	Data *User `json:"data,omitempty"`

	// Error Error that appeared while processing request
	Error *Error `json:"error,omitempty"`
}

func (response RegisterUser200JSONResponse) VisitRegisterUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login user
	// (POST /users/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Information about current user
	// (GET /users/me)
	UserMe(ctx context.Context, request UserMeRequestObject) (UserMeResponseObject, error)
	// Register user
	// (POST /users/register)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(ctx *fiber.Ctx) error {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx.UserContext(), request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserMe operation middleware
func (sh *strictHandler) UserMe(ctx *fiber.Ctx) error {
	var request UserMeRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UserMe(ctx.UserContext(), request.(UserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UserMeResponseObject); ok {
		if err := validResponse.VisitUserMeResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *fiber.Ctx) error {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx.UserContext(), request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
